/* 
 * variable   = uint64_t Value from the current CFrame's variables array
 * const uint = uint32_t
 * const int  = int32_t
 * int        = int16_t
 * uint       = uint16_t
 * cframe     = CFrame from the current CFrame's functions array
 */

ins NOP()
{
	/* Empty */
}

ins END()
{
	goto end_eval;
}

/* TODO: Make all comparisons produce boolean results */
/* TODO: Modify the OpCompiler so that Value_fromInt32 and similar not be called */

/* TODO: arithmetic variants which alert on overflow? */
/* TODO: Float operations (double) */

/* Immediates (constant 2nd parameters) */
ins ADDI(variable int, variable, const int)
{
	$2 = Value_fromInt32($1 + $3);
}

ins SLTI(variable int, variable, const int)
{
	$2 = Value_fromInt32($1 < (int32_t) $3);
}

/* Unsigned comparison */
ins SLTIU(variable uint, variable, const uint)
{
	$2 = Value_fromInt32($1 < (uint32_t) $3);
}

ins ANDI(variable, variable, const uint)
{
	$2.asBits = $1.asBits & (uint64_t) $3;
}

ins ORI(variable, variable, const uint)
{
	$2.asBits = $1.asBits | (uint64_t) $3;
}

ins XORI(variable, variable, const uint)
{
	$2.asBits = $1.asBits ^ (uint64_t) $3;
}

ins LI(variable, undef, const uint) {
	/* Sets the lower 32 bits of variable */
	$1.asBits = ($1.asBits & ((uint64_t)UINT32_MAX << 32)) | (uint64_t) $3;
}

ins LUI(variable, undef, const uint)
{
	/* Set upper 32 bits while discarding the lower 32 bits (set to 0) */
	$1.asBits = (((uint64_t) $3) << (uint64_t) 32);
}

ins LUIP(variable, undef, const uint)
{
	/* Set upper 32 bits while preserving the lower 32 bits */
	/* TODO: Do we really need to preserve the lower bits? can't we just set them to 0?
	   the lower bits can easily be set later on with ORI */
	$1.asBits = (((uint64_t) $3) << (uint64_t) 32) | ($1.asBits & UINT32_MAX);
}

ins MOVE(variable, variable) {
	$2.asBits = $1.asBits;
}

/* Arithmetic */
ins ADD(variable int, variable int, variable)
{
	$3 = Value_fromInt32($1 + $2);
}

ins SUB(variable int, variable int, variable)
{
	$3 = Value_fromInt32($1 - $2);
}

ins SLT(variable, variable int, variable int)
{
	$1 = Value_fromInt32($2 < $3);
}

/* Unsigned comparison */
/*ins SLTU(variable, variable, variable)
{
	$1.asI = $2.asU < $3.asU;
}

ins AND(variable, variable, variable)
{
	$1.asU = $2.asU & $3.asU;
}

ins OR(variable, variable, variable)
{
	$1.asU = $2.asU | $3.asU;
}

ins XOR(variable, variable, variable)
{
	$1.asU = $2.asU ^ $3.asU;
}

ins NOR(variable, variable, variable)
{
	$1.asU = ~($2.asU | $3.asU);
}

ins SLL(variable, variable, uint)
{
	$1.asU = $2.asU << $3;
}

ins SRL(variable, variable, uint)
{
	$1.asU = $2.asU >> $3;
}*/

ins SRA(variable, variable int, int)
{
	/* TODO: Hopefully this will result in arithmetic shift, implementation dependent */
	$1 = Value_fromInt32($2 >> $3);
}

ins SLLV(variable, variable uint, variable uint)
{
	$1 = Value_fromUInt32($2 << $3);
}

ins SRLV(variable, variable uint, variable uint)
{
	$1 = Value_fromUInt32($2 >> $3);
}

ins SRAV(variable, variable int, variable int)
{
	/* TODO: Hopefully this will result in arithmetic shift, implementation dependent
	         on signed int implementation */
	$1 = Value_fromInt32($2 >> $3);
}

ins JMP(undef, undef, const int)
{
	assert($3 != 0);
	instr += $3;
	continue;
}

/* TODO: Add the Jump and Link? (ie. store the previous address in some register)? */

/* TODO: Needed? The variables does not know how the instructions are arranged at the moment */
/* TODO: Jump bounds-checking? Eval-loop currently automatically checks for instruction end,
         but not for instruction start, maybe pointer to start needed too? */
ins JMPR(variable int)
{
	assert($1 != 0);
	instr += $1;
	continue;
}

ins BEQ(variable, variable, const int)
{
	if($1.asBits == $2.asBits) {
		assert($3 != 0);
		instr += $3;
		continue;
	}
}

ins BNE(variable, variable, const int)
{
	if($1.asBits != $2.asBits) {
		assert($3 != 0);
		instr += $3;
		continue;
	}
}

ins BLTZ(variable int, undef, const int)
{
	if($1 < 0) {
		assert($3 != 0);
		instr += $3;
		continue;
	}
}

ins BLEZ(variable int, undef, const int)
{
	if($1 <= 0) {
		assert($3 != 0);
		instr += $3;
		continue;
	}
}

/*ins BGTZ(variable, undef, const int)
{
	if($1.asI > 0) {
		assert($3 != 0);
		instr += $3;
		continue;
	}
}

ins BGEZ(variable, undef, const int)
{
	if($1.asI >= 0) {
		assert($3 != 0);
		instr += $3;
		continue;
	}
}*/

ins PRINT(variable) {
	printf("0x%lx\n", $1.asBits);
}

/********************************************
 * Continuation passing calling conventions *
 ********************************************/

/* TODO: Maybe merge 1st variable and parameter variables? Technically the return
         variable is a "parameter" for a specific case when the continuation is
         in a state where it is accepting a single parameter to resume its execution */
/* CFrame variables:
   0th variable is reserved for the parent in the call-stack,
   1st variable is reserved for the return value from other CFrames
   2â€“(n+2) are parameter variables, equivalent to number of parameters (n)
   (n+2)+ are general purpose variable registers
 */

/* A function call to a single-parameter "function" will go like this:
   CCFF 1, 2      (Create contination of function 1, store in variable 2
                      (no parameters to current continuation))
   CSLV 1, 2, 4   (Set first parameter to the value of variable 4)
   CALL 2         (Replace current frame with continuation in variable 2)

   Called continuation:
   ADDI 2 3 100   (Add 100 to the passed value and store in variable 3)
   CSLV 0, 1, 3   (Store variable 3 in return-continuation's return register (1st variable))
   CALL 0         ("Return" by replacing current continuation with the parent continuation)
 */


/* Call the continuation stored as a pointer in $1
   also includes incrementing the current instruction pointer by one to avoid
   jumping back to the CCALL if the called continuation bothers to return control
   to us */
ins CALL(variable cframe)
{
	/* TODO: Any type of type-checking here? we could jump anywhere */
	CFrame *next = $1;
#if VM_DEBUG_LEVEL > 2
	printf("Calling CFrame in %lx\n", (void*)next);
#endif
	
	INSTR_NEXT();
	frame->cur_instr = instr;
	
	frame = next;
	
	goto next_frame;
}

/* Continuation Set Local Variable (continuation, destination variable index, local variable)
   This is used to pass parameters to other continuations, but also to return values */
ins CSLV(variable, uint, variable)
{
	((CFrame *)Value_getPointer($1))->variables[$2] = $3;
#if VM_DEBUG_LEVEL > 2
	printf("Stored %lx in %d, CFrame %lx\n", ((CFrame *)$1.asU)->variables[$2].asBits, $2, $1.asBits);
#endif
}

/* RET should be implemented as a CCALL 0, 0th variable should be reserved for
   the return continuation */
/* RETVAR:
     CSLV  0, 1, $variable_id
     CCALL 0
   */

/* Create Continuation From Frame (source frame, destination variable)
   Creates a copy of the cframe listed in current cframe's functions
   and then stores the pointer in $2.
   It also automatically assigns the current frame pointer to the 0th
   varible of the CFrame copy. */
ins CCFF(cframe, variable)
{
	/* TODO: Reuse/allocate CFrames + variables array on internal heap */
	$2 = Value_fromPointer(CFrame_alloc());
	CFrame_copy((CFrame *)Value_getPointer($2), &$1);
#if VM_DEBUG_LEVEL > 2
	printf("Stored CFrame as %lx\n", $2.asU);
#endif
	
	/* TODO: Is this ok? Setting the 0th variable to current continuation by default? */
	((CFrame *)Value_getPointer($2))->variables[0] = Value_fromPointer(frame);
}

/* Continuation Reset Instruction Pointer (continuation)
   Resets the instruction pointer to the first_instr pointer in the CFrame,
   allowing for easy reuse of a continuation.
   */
ins CRIP(variable cframe)
{
	/* TODO: Useful/needed? */
	$1->cur_instr = $1->first_instr;
}

ins CFFR(variable cframe)
{
	CFrame_free($1);
}









